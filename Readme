# Resumo Executivo do Projeto: Explorador de Arquivos e API Dockerizada

Este projeto consistiu na cria√ß√£o e empacotamento de uma aplica√ß√£o **Flask** em um cont√™iner **Docker** √∫nico. O objetivo foi consolidar todas as funcionalidades desenvolvidas (listagem de diret√≥rios, informa√ß√µes do sistema e rota de eco) em uma solu√ß√£o pronta para ser executada em qualquer ambiente com o Docker.

---

## üéØ Objetivos e Entregas Chave

| Objetivo | Descri√ß√£o | Status |
| :--- | :--- | :--- |
| **Explorador de Arquivos (`/`)** | Implementa√ß√£o de uma rota din√¢mica para listar o conte√∫do de diret√≥rios e ler arquivos via navegador. | **Conclu√≠do** |
| **API de Informa√ß√µes (`/info`)** | Cria√ß√£o de uma rota `GET` que retorna dados do sistema operacional e mem√≥ria em formato JSON. | **Conclu√≠do** |
| **Rota de Echo (`/echo`)** | Implementa√ß√£o de uma rota `POST` que recebe um JSON com a chave "msg" e retorna a mensagem de volta. | **Conclu√≠do** |
| **Dockeriza√ß√£o** | Empacotamento completo da aplica√ß√£o usando `Dockerfile` e orquestra√ß√£o via `docker-compose.yml`. | **Conclu√≠do** |
| **Melhoria Visual** | Adi√ß√£o de uma barra de pesquisa (filtro em tempo real com JavaScript) para melhorar a usabilidade da listagem de arquivos. | **Conclu√≠do** |

---

## üõ†Ô∏è Tecnologias e Ferramentas Utilizadas

* **Linguagem:** Python
* **Framework:** Flask
* **Cont√™iner:** Docker
* **Orquestra√ß√£o:** Docker Compose
* **Outras libs:** `os`, `platform`, `psutil`
* **Controle de Vers√£o:** Git / GitHub

---

## ‚úÖ Como Executar

A aplica√ß√£o pode ser iniciada com um √∫nico comando na pasta raiz do projeto:

```bash
docker-compose up